set hidden
set autoread
set nobackup
set mouse=a
set noswapfile
set splitright
set splitbelow
set clipboard+=unnamed
" swapfileが存在するときに自動的にreadonlyで開く
augroup swapchoice-readonly
  autocmd!
  autocmd SwapExists * let v:swapchoice = 'o'
augroup END

"----------------------------
" 検索・置換
"----------------------------
set hlsearch
set incsearch
set ignorecase smartcase
set wrapscan
"set gdefault

"----------------------------
" 表示
"----------------------------
set scrolloff=6
set showcmd
set showmatch matchtime=1
set list listchars=tab:~\ ,trail:~
set laststatus=2
set number
set foldmethod=manual
set virtualedit=onemore
set whichwrap+=h,l
set cursorline

"----------------------------
" タブ・インデント
"----------------------------
set expandtab
set tabstop=2
set softtabstop=-1
set shiftwidth=2
""indent設定はfiletype indentで上書きされうるので注意
""（:edit $VIMRUNTIME/ftplugin）
set autoindent
set nosmartindent
"set cindent

"----------------------------
" color
"----------------------------
syntax enable
set termguicolors
colorscheme molokai
hi CursorLine guifg=NONE
hi Comment ctermfg=3
hi Search gui=reverse guifg=MediumTurquoise guibg=Grey15
hi IncSearch gui=reverse guifg=IndianRed1 guibg=Grey15
set pumblend=10
let g:active_bg = 'guibg=NONE'
let g:inactive_bg = 'guibg=#202620'
execute ('hi Normal '.g:active_bg)
execute ('hi NormalNC '.g:inactive_bg)

"----------------------------
" Key Mapping
"----------------------------
"" Leader
let mapleader = "\<Space>"


"" escape
nnoremap <silent> <C-s> <ESC>:<C-u>nohlsearch<CR>
inoremap <silent> <C-s> <ESC>:<C-u>nohlsearch<CR>
vnoremap <silent> <C-s> <ESC>:<C-u>nohlsearch<CR>
xnoremap <C-s> <ESC>
onoremap <C-s> <ESC>
tnoremap <C-s> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>
tnoremap <ESC> <C-\><C-n>
cnoremap <C-s> <ESC>


"" move
nnoremap <Down> 3j
vnoremap <Down> 3j
nnoremap <Up> 3k
vnoremap <Up> 3k


"" cut & not save
vnoremap d "_d
nnoremap d "_d
vnoremap D "_d
nnoremap D "_dd
vnoremap x "_x
nnoremap x "_x
vnoremap s "_s
nnoremap s "_s
vnoremap c "_c
nnoremap c "_c
vnoremap C "_C
nnoremap C "_C
vnoremap p "_dP
vnoremap P "_dP
"" cut & save
nnoremap t d
vnoremap t x
nnoremap tt dd
vnoremap t d
nnoremap T dd
vnoremap T d
" "" cut & save
" nnoremap <C-t> "0ddk"0P
"" yank
vnoremap y "+y
nnoremap Y "+yy
"" yank & move
vnoremap gy "+ygv`><ESC>
" "" yank & paste
" nnoremap <C-y> "0yy"0P
nnoremap <A-j> ddp
nnoremap <A-k> dd<Up>P
vnoremap <A-j> dp`[v`]$
vnoremap <A-k> d<Up>P`[v`]$


"" window, tab, buffer operation(normal)
function BufferDeleteAndMove() abort
  let current_buffer = bufnr()
  execute "bnext"
  execute "bdelete".current_buffer
endfunction
nnoremap [window] <Nop>
nmap <C-w> [window]
" nnoremap [window] <Nop>
nnoremap [window]h <C-w>h
nnoremap [window]j <C-w>j
nnoremap [window]k <C-w>k
nnoremap [window]l <C-w>l
nnoremap [window]d :<C-u>call BufferDeleteAndMove()<CR>
nnoremap [window]D :<C-u>bdelete<CR>
nnoremap [window]f :<C-u>bfirst<CR>
nnoremap <C-b>  :<C-u>buffer #<CR>
nnoremap <C-l>  :<C-u>bnext<CR>
nnoremap <C-h>  :<C-u>bprev<CR>
nnoremap [window]o <C-w>w
nnoremap [window]O <C-w>W
nnoremap [window]L <C-w>>
nnoremap [window]H <C-w><
nnoremap [window]K <C-w>+
nnoremap [window]J <C-w>-
nnoremap [window]s <C-w>s
nnoremap [window]_ :<C-u>split<CR>
nnoremap [window]v <C-w>v
nnoremap [window]\ :<C-u>vsplit<CR>
nnoremap [window]x :<C-u>close<CR>
nnoremap [window]z :<C-u>only<CR>
nnoremap [window]t <C-w>T 
nnoremap [window]c :<C-u>tabnew<CR>
nnoremap [window]n :<C-u>tabnext<CR>
nnoremap [window]p :<C-u>tabprevious<CR>
nnoremap [window]& :<C-u>tabclose<CR>

"" window, tab, buffer operation(insert)
" inoremap <C-w> <Nop>
" inoremap [window] <Nop>
" imap <C-w> [window]
" inoremap [window]h <ESC><C-w>h
" inoremap [window]j <ESC><C-w>j
" inoremap [window]k <ESC><C-w>k
" inoremap [window]l <ESC><C-w>l
" inoremap [window]d <ESC>:<C-u>call BufferDeleteAndMove()<CR>
" inoremap [window]D <ESC>:<C-u>bdelete<CR>
" inoremap [window]f <ESC>:<C-u>bfirst<CR>
" inoremap [window]b <ESC>:<C-u>buffer #<CR>
" inoremap [window]o <ESC><C-w>w
" inoremap [window]O <ESC><C-w>W
" inoremap [window]u <ESC><C-w>p
" inoremap [window]L <ESC><C-w>>
" inoremap [window]H <ESC><C-w><
" inoremap [window]K <ESC><C-w>+
" inoremap [window]J <ESC><C-w>-
" inoremap [window]s <ESC>:<C-u>split<CR>
" inoremap [window]_ <ESC>:<C-u>split<CR>
" inoremap [window]v <ESC>:<C-u>vsplit<CR>
" inoremap [window]\ <ESC>:<C-u>vsplit<CR>
" inoremap [window]x <ESC>:<C-u>close<CR>
" inoremap [window]z <ESC>:<C-u>only<CR>
" inoremap [window]t <ESC><C-w>T
" inoremap [window]c <ESC>:<C-u>tabnew<CR>
" inoremap [window]n <ESC>:<C-u>tabnext<CR>
" inoremap [window]p <ESC>:<C-u>tabprevious<CR>
" inoremap [window]& <ESC>:<C-u>tabclose<CR>

"" window, tab, buffer operation(terminal)
" tnoremap <C-w> <Nop>
tnoremap [window] <Nop>
tmap <C-w> [window]
tnoremap [window]h <C-\><C-n><C-w>h
tnoremap [window]j <C-\><C-n><C-w>j
tnoremap [window]k <C-\><C-n><C-w>k
tnoremap [window]l <C-\><C-n><C-w>l
tnoremap [window]d <C-\><C-n>:<C-u>call BufferDeleteAndMove()<CR>
tnoremap [window]D <C-\><C-n>:<C-u>bdelete<CR>
tnoremap [window]f <C-\><C-n>:<C-u>bfirst<CR>
tnoremap [window]b <C-\><C-n>:<C-u>buffer #<CR>
tnoremap [window]o <C-\><C-n><C-w>w
tnoremap [window]O <C-\><C-n><C-w>W
tnoremap [window]u <C-\><C-n><C-w>p
tnoremap [window]L <C-\><C-n><C-w>>
tnoremap [window]H <C-\><C-n><C-w><
tnoremap [window]K <C-\><C-n><C-w>+
tnoremap [window]J <C-\><C-n><C-w>-
tnoremap [window]s <C-\><C-n>:<C-u>split<CR>
tnoremap [window]_ <C-\><C-n>:<C-u>split<CR>
tnoremap [window]v <C-\><C-n>:<C-u>vsplit<CR>
tnoremap [window]\ <C-\><C-n>:<C-u>vsplit<CR>
tnoremap [window]x <C-\><C-n>:<C-u>close<CR>
tnoremap <C-l>  <C-\><C-n>:<C-u>close<CR>
tnoremap [window]z <C-\><C-n>:<C-u>only<CR>
tnoremap [window]t <C-\><C-n><C-w>T
tnoremap [window]c <C-\><C-n>:<C-u>tabnew<CR>
tnoremap [window]n <C-\><C-n>:<C-u>tabnext<CR>
tnoremap [window]p <C-\><C-n>:<C-u>tabprevious<CR>
tnoremap [window]& <C-\><C-n>:<C-u>tabclose<CR>


"" save or quit
nnoremap zz :<C-u>update<CR>
nnoremap ZZ <Nop>
nnoremap Zz ZZ
nnoremap Zq :<C-u>quit<CR>
nnoremap ZQ :<C-u>quit!<CR>
nnoremap Za :<C-u>quitall<CR>
nnoremap ZA :<C-u>quitall!<CR>


"" scroll
nnoremap <C-y> <Nop>
vnoremap <C-y> <Nop>
onoremap <C-y> <Nop>
nnoremap <C-f> <Nop>
vnoremap <C-f> <Nop>
onoremap <C-f> <Nop>
nnoremap g<C-j> <C-e>
vnoremap g<C-j> <C-e>
onoremap g<C-j> <C-e>
nnoremap g<C-k> <C-y>
vnoremap g<C-k> <C-y>
onoremap g<C-k> <C-y>
nnoremap <Leader><C-j> <C-e>j
vnoremap <Leader><C-j> <C-e>j
onoremap <Leader><C-j> <C-e>j
nnoremap <Leader><C-k> <C-y>k
vnoremap <Leader><C-k> <C-y>k
onoremap <Leader><C-k> <C-y>k
nnoremap zt <Nop>
vnoremap zt <Nop>
onoremap zt <Nop>
nnoremap zb <Nop>
vnoremap zb <Nop>
onoremap zb <Nop>
nnoremap z, zt
vnoremap z, zt
onoremap z, zt
nnoremap z/ zb
vnoremap z/ zb
onoremap z/ zb


"" indent
nnoremap > >>
nnoremap < <<
nnoremap g> >
nnoremap g< <
vnoremap > >gv
vnoremap < <gv


"" emacs like key mappings
nnoremap <C-a> ^
inoremap <C-a> <C-o>^
vnoremap <C-a> ^
onoremap <C-a> ^
cnoremap <C-a> <C-b>

nnoremap <C-e> :<C-u>normal $l<CR>
inoremap <C-e> <C-o>$
vnoremap <C-e> g_
onoremap <C-e> g_

nnoremap <C-w><C-w> "_dvB
tnoremap <C-w><C-w> <C-w>.<BS>

inoremap <C-b> <Left>
cnoremap <C-b> <Left>

inoremap <C-f> <Right>
cnoremap <C-f> <Right>

inoremap <C-d> <Delete>
cnoremap <C-d> <Delete>

inoremap <C-k> <C-o>"_d$
cnoremap <C-k> <C-\>e(strpart(getcmdline(), 0, getcmdpos() - 1))<CR>


"" custom normal, visual, operation pending
" nnoremap m <Nop>
inoremap <C-x>s s


"" add N
nnoremap <C-p> <C-a>


"" restore to the last write status
nnoremap U :<C-u>earlier 1f<CR>


"" insret new line．コメントは継続されず，移動もしない
nnoremap gn :<C-u>call append(line('.'), '')<CR>
nnoremap gN :<C-u>call append(line('.')-1, '')<CR>
" ""空行追加．コメント行のあとはコメントが継続する．移動もする．
" nnoremap gn :o<ESC>
" nnoremap gN :O<ESC>

"" visual search
vnoremap * y/<C-R>"<CR>
"" strict search
nnoremap \ /\<\><Left><Left>
"" non-moving search under cursor
nnoremap <silent> * "zyiw:let @/ = '\<' . @z . '\>'<CR>:set hlsearch<CR>
"" case sensitive search
nnoremap g/ /\C
"" delete search hilight
nnoremap <Leader><Leader>/ :<C-u>nohlsearch<CR>
"" search in screen range
nnoremap <Leader>/ m'HVL<ESC>2<C-o>/\%V
nnoremap <Leader>? m'HVL<ESC>2<C-o>?\%V
nnoremap <Leader>* m'HVL<ESC>2<C-o>:<C-u>execute '/\%V' . expand('<cword>')<CR>
nnoremap <Leader># m'HVL<ESC>2<C-o>:<C-u>execute '?\%V' . expand('<cword>')<CR>


"" 2 chars search and jump
function S_jump(num_char, dir, visual)
  nohlsearch
  let l:str = ""
  while len(l:str) < a:num_char
    let l:str = l:str . nr2char(getchar())
  endwhile
  let l:str = l:str . '\C'
  echo l:str
  if a:dir == 1
    let @/ = l:str
    " call search(l:str, "z")
    execute 'normal /' . l:str . '/'
  elseif a:dir == 0
    let @/ = l:str
    " call search(l:str, "bz")
    execute 'normal ?' . l:str . '?'
  endif
  if a:visual == 1
    execute 'normal gvn'
  endif
endfunction
nnoremap <silent> s :<C-u>call S_jump(2, 1, 0)<CR>
vnoremap <silent> s :<C-u>call S_jump(2, 1, 1)<CR>
onoremap <silent> s :<C-u>call S_jump(2, 1, 0)<CR>
nnoremap <silent> S :<C-u>call S_jump(2, 0, 0)<CR>
vnoremap <silent> S :<C-u>call S_jump(2, 0, 1)<CR>
onoremap <silent> S :<C-u>call S_jump(2, 0, 0)<CR>
"" jump with jumplist within file
function! JumpWithinFile(back, forw)
  let [n, i] = [bufnr('%'), 1]
  let p = [n] + getpos('.')[1:]
  sil! exe 'norm!1' . a:forw
  while 1
    let p1 = [bufnr('%')] + getpos('.')[1:]
    if n == p1[0] | break | endif
    if p == p1
      sil! exe 'norm!' . (i-1) . a:back
      break
    endif
    let [p, i] = [p1, i+1]
    sil! exe 'norm!1' . a:forw
  endwhile
endfunction
nnoremap <silent> <C-k> :call JumpWithinFile("\<C-i>", "\<C-o>")<cr>
nnoremap <silent> <C-j> :call JumpWithinFile("\<C-o>", "\<C-i>")<cr>
"" mark spot jump
nnoremap ' `
"" indent jump
nnoremap ]i 0y^/^<C-R>0\_s\@!<CR>:<C-u>nohlsearch<CR>^
vnoremap ]i <ESC>0y^gv/^<C-R>0\_s\@!<CR>
nnoremap [i 0y^?^<C-R>0\_s\@!<CR>:<C-u>nohlsearch<CR>^
vnoremap [i <ESC>0y^gv?^<C-R>0\_s\@!<CR>
"" fold jump
nnoremap zj <Nop>
nnoremap zk <Nop>
nnoremap ]z zj
nnoremap [z zk
nnoremap ]Z ]z
nnoremap [Z [z


"" fold operation
nnoremap zh zc
nnoremap zH zC
nnoremap zl zo
nnoremap zL zO
nnoremap ze zi
nnoremap zb zf%
nnoremap zi 0y^V/^<C-R>0\_s\@!<CR>kzf:<C-u>nohlsearch<CR>


"" onetime insert mode
" nnoremap q i<Space><ESC>r
nnoremap q <Nop>
nnoremap <C-q> q


"" repeat command
nnoremap g. q:k<CR>


"" command line window
nnoremap c: q:
nnoremap c/ q/
nnoremap c? q?


"" search and replace prefix
nnoremap gr :<C-u>%s///g<Left><Left>
"" visual replace prefix
vnoremap gr :<C-u>'<,'>s///g<Left><Left><Left>


"" custom insert & command & terminal mode
inoremap <C-l> <C-o>"_dd
cmap <C-l> <C-u><C-k>
inoremap <C-g>n <C-o>:<C-u>call append(line('.'), '')<CR>
inoremap <C-g>N <C-o>:<C-u>call append(line('.'), '')<CR>
inoremap <C-t> <Left><C-o>"zx<Left><C-r>z<Right>
inoremap <C-r><C-r> <C-r>*
cnoremap <C-r><C-r> <C-r>*
inoremap <C-y> <C-o>diw
inoremap <A-f> <C-o>f
inoremap <A-S-f> <C-o>F
inoremap <C-]> <C-o>,
inoremap <C-[> <C-o>;
inoremap <C-x>. <C-a>
" cnoremap <C-x> <C-d>
" inoremap <C-g> <C-o>w
" inoremap <C-v> <C-o>b
" inoremap <C-l> <C-o>e
" inoremap <C-l> <C-o>"_dw
" inoremap <A-i> <C-o>"_diw
" inoremap <A-j> <Down>
" inoremap <A-k> <Up>


"" terminal mode移行時にterminal-job modeにする
autocmd TermOpen * startinsert
autocmd TermEnter * startinsert
autocmd WinEnter * if &buftype ==# 'terminal' | startinsert | endif
autocmd BufEnter * if &buftype ==# 'terminal' | startinsert | endif


"" quickfix
function! s:configure_quickfix() abort
  nnoremap <buffer> q :<C-u>cclose<CR>
endfunction
augroup MyQuickFix
  autocmd!
  autocmd FileType qf call s:configure_quickfix()
augroup END


"" surroundings
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap ( ()<Left>
inoremap [ []<Left>
inoremap { {}<Left>
inoremap "" ""<Left>
inoremap '' ''<Left>
inoremap () ()<Left>
inoremap [] []<Left>
inoremap {} {}<Left>
vnoremap " c""<ESC>P
vnoremap ' c''<ESC>P
vnoremap ( c()<ESC>P
vnoremap [ c[]<ESC>P
vnoremap { c{}<ESC>P
